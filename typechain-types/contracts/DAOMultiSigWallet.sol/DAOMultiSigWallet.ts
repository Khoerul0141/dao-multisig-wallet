/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DAOMultiSigWalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PROPOSAL_DURATION"
      | "MAX_SIGNERS"
      | "MIN_PROPOSAL_DURATION"
      | "MIN_SIGNERS"
      | "addSigner"
      | "batchExecuteTransactions"
      | "batchVote"
      | "changeExecutionDelay"
      | "changeProposalDuration"
      | "changeRequiredSignatures"
      | "config"
      | "eip712Domain"
      | "estimateBatchExecutionGas"
      | "estimateExecutionGas"
      | "executeTransaction"
      | "executionDelay"
      | "getProposal"
      | "getProposalDuration"
      | "getRequiredSignatures"
      | "getSignerCount"
      | "getSigners"
      | "getTransaction"
      | "getTransactionStatus"
      | "getVote"
      | "hasVoted"
      | "isPaused"
      | "isSigner"
      | "owner"
      | "proposals"
      | "removeSigner"
      | "renounceOwnership"
      | "signers"
      | "submitBatchTransactions"
      | "submitTransaction"
      | "togglePause"
      | "transactionCount"
      | "transactions"
      | "transferOwnership"
      | "voteOnTransaction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "EmergencyPause"
      | "OwnershipTransferred"
      | "ProposalDurationChanged"
      | "RequiredSignaturesChanged"
      | "SignerAdded"
      | "SignerRemoved"
      | "TransactionExecuted"
      | "TransactionSubmitted"
      | "TransactionVoted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PROPOSAL_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SIGNERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PROPOSAL_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_SIGNERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchExecuteTransactions",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchVote",
    values: [BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeExecutionDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProposalDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequiredSignatures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateBatchExecutionGas",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateExecutionGas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executionDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredSignatures",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSignerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSigners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitBatchTransactions",
    values: [AddressLike[], BigNumberish[], BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "togglePause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnTransaction",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PROPOSAL_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SIGNERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PROPOSAL_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_SIGNERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchExecuteTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeExecutionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProposalDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateBatchExecutionGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateExecutionGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSigners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitBatchTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "togglePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnTransaction",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalDurationChangedEvent {
  export type InputTuple = [
    oldDuration: BigNumberish,
    newDuration: BigNumberish
  ];
  export type OutputTuple = [oldDuration: bigint, newDuration: bigint];
  export interface OutputObject {
    oldDuration: bigint;
    newDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequiredSignaturesChangedEvent {
  export type InputTuple = [
    oldRequired: BigNumberish,
    newRequired: BigNumberish
  ];
  export type OutputTuple = [oldRequired: bigint, newRequired: bigint];
  export interface OutputObject {
    oldRequired: bigint;
    newRequired: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerAddedEvent {
  export type InputTuple = [signer: AddressLike];
  export type OutputTuple = [signer: string];
  export interface OutputObject {
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerRemovedEvent {
  export type InputTuple = [signer: AddressLike];
  export type OutputTuple = [signer: string];
  export interface OutputObject {
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionExecutedEvent {
  export type InputTuple = [
    txId: BigNumberish,
    executor: AddressLike,
    success: boolean
  ];
  export type OutputTuple = [txId: bigint, executor: string, success: boolean];
  export interface OutputObject {
    txId: bigint;
    executor: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionSubmittedEvent {
  export type InputTuple = [
    txId: BigNumberish,
    submitter: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    txId: bigint,
    submitter: string,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    txId: bigint;
    submitter: string;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionVotedEvent {
  export type InputTuple = [
    txId: BigNumberish,
    voter: AddressLike,
    support: boolean
  ];
  export type OutputTuple = [txId: bigint, voter: string, support: boolean];
  export interface OutputObject {
    txId: bigint;
    voter: string;
    support: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DAOMultiSigWallet extends BaseContract {
  connect(runner?: ContractRunner | null): DAOMultiSigWallet;
  waitForDeployment(): Promise<this>;

  interface: DAOMultiSigWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PROPOSAL_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_SIGNERS: TypedContractMethod<[], [bigint], "view">;

  MIN_PROPOSAL_DURATION: TypedContractMethod<[], [bigint], "view">;

  MIN_SIGNERS: TypedContractMethod<[], [bigint], "view">;

  addSigner: TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;

  batchExecuteTransactions: TypedContractMethod<
    [_txIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchVote: TypedContractMethod<
    [_txIds: BigNumberish[], _supports: boolean[]],
    [void],
    "nonpayable"
  >;

  changeExecutionDelay: TypedContractMethod<
    [_delay: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeProposalDuration: TypedContractMethod<
    [_duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeRequiredSignatures: TypedContractMethod<
    [_required: BigNumberish],
    [void],
    "nonpayable"
  >;

  config: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, boolean] & {
        requiredSignatures: bigint;
        proposalDuration: bigint;
        paused: boolean;
        initialized: boolean;
      }
    ],
    "view"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  estimateBatchExecutionGas: TypedContractMethod<
    [_txIds: BigNumberish[]],
    [bigint],
    "view"
  >;

  estimateExecutionGas: TypedContractMethod<
    [_txId: BigNumberish],
    [bigint],
    "view"
  >;

  executeTransaction: TypedContractMethod<
    [_txId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executionDelay: TypedContractMethod<[], [bigint], "view">;

  getProposal: TypedContractMethod<
    [_txId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        txId: bigint;
        startTime: bigint;
        endTime: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  getProposalDuration: TypedContractMethod<[], [bigint], "view">;

  getRequiredSignatures: TypedContractMethod<[], [bigint], "view">;

  getSignerCount: TypedContractMethod<[], [bigint], "view">;

  getSigners: TypedContractMethod<[], [string[]], "view">;

  getTransaction: TypedContractMethod<
    [_txId: BigNumberish],
    [
      [string, bigint, string, boolean, bigint, bigint, bigint, bigint] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
        deadline: bigint;
        yesVotes: bigint;
        noVotes: bigint;
        submissionTime: bigint;
      }
    ],
    "view"
  >;

  getTransactionStatus: TypedContractMethod<
    [_txId: BigNumberish],
    [
      [boolean, boolean, boolean, bigint] & {
        canVote: boolean;
        canExecute: boolean;
        isExpired: boolean;
        votingTimeLeft: bigint;
      }
    ],
    "view"
  >;

  getVote: TypedContractMethod<
    [_txId: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [_txId: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  isSigner: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        txId: bigint;
        startTime: bigint;
        endTime: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  removeSigner: TypedContractMethod<
    [_signer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  signers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  submitBatchTransactions: TypedContractMethod<
    [
      _targets: AddressLike[],
      _values: BigNumberish[],
      _data: BytesLike[],
      _deadlines: BigNumberish[]
    ],
    [bigint[]],
    "nonpayable"
  >;

  submitTransaction: TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _data: BytesLike,
      _deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  togglePause: TypedContractMethod<[], [void], "nonpayable">;

  transactionCount: TypedContractMethod<[], [bigint], "view">;

  transactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
        deadline: bigint;
        nonce: bigint;
        yesVotes: bigint;
        noVotes: bigint;
        submissionTime: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  voteOnTransaction: TypedContractMethod<
    [_txId: BigNumberish, _support: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PROPOSAL_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SIGNERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PROPOSAL_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_SIGNERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addSigner"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchExecuteTransactions"
  ): TypedContractMethod<[_txIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchVote"
  ): TypedContractMethod<
    [_txIds: BigNumberish[], _supports: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeExecutionDelay"
  ): TypedContractMethod<[_delay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeProposalDuration"
  ): TypedContractMethod<[_duration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeRequiredSignatures"
  ): TypedContractMethod<[_required: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, boolean] & {
        requiredSignatures: bigint;
        proposalDuration: bigint;
        paused: boolean;
        initialized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimateBatchExecutionGas"
  ): TypedContractMethod<[_txIds: BigNumberish[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "estimateExecutionGas"
  ): TypedContractMethod<[_txId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<[_txId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executionDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [_txId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        txId: bigint;
        startTime: bigint;
        endTime: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRequiredSignatures"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSignerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSigners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTransaction"
  ): TypedContractMethod<
    [_txId: BigNumberish],
    [
      [string, bigint, string, boolean, bigint, bigint, bigint, bigint] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
        deadline: bigint;
        yesVotes: bigint;
        noVotes: bigint;
        submissionTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransactionStatus"
  ): TypedContractMethod<
    [_txId: BigNumberish],
    [
      [boolean, boolean, boolean, bigint] & {
        canVote: boolean;
        canExecute: boolean;
        isExpired: boolean;
        votingTimeLeft: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVote"
  ): TypedContractMethod<
    [_txId: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [_txId: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSigner"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        txId: bigint;
        startTime: bigint;
        endTime: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeSigner"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "signers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "submitBatchTransactions"
  ): TypedContractMethod<
    [
      _targets: AddressLike[],
      _values: BigNumberish[],
      _data: BytesLike[],
      _deadlines: BigNumberish[]
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitTransaction"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _data: BytesLike,
      _deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "togglePause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transactionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
        deadline: bigint;
        nonce: bigint;
        yesVotes: bigint;
        noVotes: bigint;
        submissionTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voteOnTransaction"
  ): TypedContractMethod<
    [_txId: BigNumberish, _support: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPause"
  ): TypedContractEvent<
    EmergencyPauseEvent.InputTuple,
    EmergencyPauseEvent.OutputTuple,
    EmergencyPauseEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalDurationChanged"
  ): TypedContractEvent<
    ProposalDurationChangedEvent.InputTuple,
    ProposalDurationChangedEvent.OutputTuple,
    ProposalDurationChangedEvent.OutputObject
  >;
  getEvent(
    key: "RequiredSignaturesChanged"
  ): TypedContractEvent<
    RequiredSignaturesChangedEvent.InputTuple,
    RequiredSignaturesChangedEvent.OutputTuple,
    RequiredSignaturesChangedEvent.OutputObject
  >;
  getEvent(
    key: "SignerAdded"
  ): TypedContractEvent<
    SignerAddedEvent.InputTuple,
    SignerAddedEvent.OutputTuple,
    SignerAddedEvent.OutputObject
  >;
  getEvent(
    key: "SignerRemoved"
  ): TypedContractEvent<
    SignerRemovedEvent.InputTuple,
    SignerRemovedEvent.OutputTuple,
    SignerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionExecuted"
  ): TypedContractEvent<
    TransactionExecutedEvent.InputTuple,
    TransactionExecutedEvent.OutputTuple,
    TransactionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionSubmitted"
  ): TypedContractEvent<
    TransactionSubmittedEvent.InputTuple,
    TransactionSubmittedEvent.OutputTuple,
    TransactionSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionVoted"
  ): TypedContractEvent<
    TransactionVotedEvent.InputTuple,
    TransactionVotedEvent.OutputTuple,
    TransactionVotedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "EmergencyPause(bool)": TypedContractEvent<
      EmergencyPauseEvent.InputTuple,
      EmergencyPauseEvent.OutputTuple,
      EmergencyPauseEvent.OutputObject
    >;
    EmergencyPause: TypedContractEvent<
      EmergencyPauseEvent.InputTuple,
      EmergencyPauseEvent.OutputTuple,
      EmergencyPauseEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalDurationChanged(uint256,uint256)": TypedContractEvent<
      ProposalDurationChangedEvent.InputTuple,
      ProposalDurationChangedEvent.OutputTuple,
      ProposalDurationChangedEvent.OutputObject
    >;
    ProposalDurationChanged: TypedContractEvent<
      ProposalDurationChangedEvent.InputTuple,
      ProposalDurationChangedEvent.OutputTuple,
      ProposalDurationChangedEvent.OutputObject
    >;

    "RequiredSignaturesChanged(uint256,uint256)": TypedContractEvent<
      RequiredSignaturesChangedEvent.InputTuple,
      RequiredSignaturesChangedEvent.OutputTuple,
      RequiredSignaturesChangedEvent.OutputObject
    >;
    RequiredSignaturesChanged: TypedContractEvent<
      RequiredSignaturesChangedEvent.InputTuple,
      RequiredSignaturesChangedEvent.OutputTuple,
      RequiredSignaturesChangedEvent.OutputObject
    >;

    "SignerAdded(address)": TypedContractEvent<
      SignerAddedEvent.InputTuple,
      SignerAddedEvent.OutputTuple,
      SignerAddedEvent.OutputObject
    >;
    SignerAdded: TypedContractEvent<
      SignerAddedEvent.InputTuple,
      SignerAddedEvent.OutputTuple,
      SignerAddedEvent.OutputObject
    >;

    "SignerRemoved(address)": TypedContractEvent<
      SignerRemovedEvent.InputTuple,
      SignerRemovedEvent.OutputTuple,
      SignerRemovedEvent.OutputObject
    >;
    SignerRemoved: TypedContractEvent<
      SignerRemovedEvent.InputTuple,
      SignerRemovedEvent.OutputTuple,
      SignerRemovedEvent.OutputObject
    >;

    "TransactionExecuted(uint256,address,bool)": TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;
    TransactionExecuted: TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;

    "TransactionSubmitted(uint256,address,address,uint256,bytes)": TypedContractEvent<
      TransactionSubmittedEvent.InputTuple,
      TransactionSubmittedEvent.OutputTuple,
      TransactionSubmittedEvent.OutputObject
    >;
    TransactionSubmitted: TypedContractEvent<
      TransactionSubmittedEvent.InputTuple,
      TransactionSubmittedEvent.OutputTuple,
      TransactionSubmittedEvent.OutputObject
    >;

    "TransactionVoted(uint256,address,bool)": TypedContractEvent<
      TransactionVotedEvent.InputTuple,
      TransactionVotedEvent.OutputTuple,
      TransactionVotedEvent.OutputObject
    >;
    TransactionVoted: TypedContractEvent<
      TransactionVotedEvent.InputTuple,
      TransactionVotedEvent.OutputTuple,
      TransactionVotedEvent.OutputObject
    >;
  };
}
